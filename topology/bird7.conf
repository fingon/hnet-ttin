# REST network has
# server
# HOME network has
# cpe, bird1 [=>BIRD1], bird2 [=>BIRD2]
# BIRD1 has:
# bird1, bird3 [+BIRD3]
# BIRD2 has:
# bird2
# BIRD3 has:
# client

# => the route to 'the world' goes like
# client -> bird3 -> bird1 -> cpe -> isp -> server
# (woah)

LAB_AUTHOR="Markus Stenberg"
LAB_EMAIL="mstenber@cisco.com"
LAB_DESCRIPTION="Not-so-minimalist setup with 3 inner routers and CER running BIRD"
machines="client cpe isp server bird1 bird2 bird3"

# server is by default on 'REST' network
server[template]=server

isp[template]=isp6d-ra

# client is by default on HOME network, with DHCP for v4
client[template]=client
client[0]=BIRD3
client[1]=CLIENT

cpe[template]=bird
cpe[0]=HOME
cpe[1]=ISP

bird1[template]=bird
bird1[0]=HOME
bird1[1]=BIRD1

bird1[2]=BIRD2
# just to make sure we survive two IFs in same hub/switch
# NOTE: Currently won't form neigh's in this case -> can do this only with
# redundant links.. sigh. This should be fixed at some point.
#bird1[2]=BIRD1 

bird2[template]=bird
bird2[0]=HOME
# just to make sure we survive two IFs in same hub/switch
bird2[1]=BIRD2
#bird2[2]=BIRD2

bird3[template]=bird
bird3[0]=BIRD1
bird3[1]=BIRD3

# TAP interface to the bird so we should be able to ping isp.. eventually.
bird3[2]=tap,192.168.42.1,192.168.42.2

# Another place to attach the TAP interface - to the client
#client[1]=tap,192.168.42.1,192.168.42.2

# override that we generate this
skip=
