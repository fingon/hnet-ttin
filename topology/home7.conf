# REST network has
# server
# HOME network has
# cpe, router1 [=>ROUTER1], router2 [=>ROUTER2]
# ROUTER1 has:
# router1, router3 [+ROUTER3]
# ROUTER2 has:
# router2
# ROUTER3 has:
# client

# => the route to 'the world' goes like
# client -> router3 -> router1 -> cpe -> isp -> server
# (woah)

LAB_AUTHOR="Markus Stenberg"
LAB_EMAIL="mstenber@cisco.com"
LAB_DESCRIPTION="Not-so-minimalist setup with 3 inner routers and CER running ROUTER"
machines="client cpe isp server ir1 ir2 ir3"
# nsa # (if mitm is desired)

# server is by default on 'REST' network
server[template]=server

isp[template]=isp4-6

# client is by default on HOME network, with DHCP for v4
client[template]=client
client[0]=ROUTER3
client[1]=CLIENT

cpe[template]=router
cpe[0]=HOME
cpe[1]=ISP

ir1[template]=router
ir1[0]=HOME
ir1[1]=ROUTER1

ir1[2]=ROUTER2
# just to make sure we survive two IFs in same hub/switch
# NOTE: Currently won't form neigh's in this case -> can do this only with
# redundant links.. sigh. This should be fixed at some point.
#router1[2]=ROUTER1 

ir2[template]=router
ir2[0]=HOME
# just to make sure we survive two IFs in same hub/switch
ir2[1]=ROUTER2
#router2[2]=ROUTER2

ir3[template]=router
ir3[0]=ROUTER1
ir3[1]=ROUTER3
ir3[2]=ROUTER32

# TAP interface to the router so we should be able to ping isp.. eventually.
#ir3[3]=tap,192.168.7.1,192.168.7.2
#(this may wind up with interface being treated as external)

# Another place to attach the TAP interface - to the client
#client[1]=tap,192.168.7.1,192.168.7.2

# nsa == magic name; this node will have _every_ interface connected
# to it, and dynamic bridges set up between the interfaces so that in
# the end, normal topology _seems_ to work but everything goes through
# it (of course, nsa also tcpdumps by default everything)
nsa[template]=nsa
