# Dump cores
ulimit -c unlimited

# Use the hnetenv for this session
. /usr/bin/hnetenv.sh

# Also, make the new shell spawned for root use it too
echo '. /usr/bin/hnetenv.sh' >> /root/.bashrc

# These shouldn't be neccessary due to hnetenv.
#for FILE in $BUILD/bin/* $BUILD/sbin/*
#do
#        if [ -x $FILE -o -h $FILE ]
#        then
#                ln -sf $FILE /usr/bin
#        fi
#done

# However, support files have fixed places..
for DIR in $BUILD/share/*
do
        if [ -d $DIR ]
        then
               ln -sf $DIR /usr/share/
        fi
done

for FILE in hnetd-backend hnetd-routing
do
        ln -s $BUILD/sbin/$FILE /usr/sbin
done

for FILE in dnsmasq
do
        ln -sf $BUILD/bin/$FILE /usr/sbin
done

mkdir -p /usr/local/var/run

_withdev () {
         DEV=$1
         shift
         ip link | grep -q ${DEV}: && eval $*
}

# .. just in case (if this is used stand-alone)
# enable ipv6 forwarding
echo 1 > /proc/sys/net/ipv6/conf/all/forwarding

# Make sure interfaces are up
_withdev eth0 ifconfig eth0 up
_withdev eth1 ifconfig eth1 up
_withdev eth2 ifconfig eth2 up
_withdev eth3 ifconfig eth3 up

# Some kernel modules might be useful. If it fails, too bad.
# (These are not autoloaded, unlike most modules, at least as of 09/2014.)
modprobe ipt_REJECT
modprobe ip6t_REJECT

LOGDIR=/hostlab/logs/`hostname`
mkdir -p $LOGDIR

# Start tcpdump too, just in case
/usr/sbin/tcpdump -i eth0 -s 1500 -w $LOGDIR/tcpdump.dat &

VALGRIND=

# Default valgrind mode
VALGRIND="valgrind --suppressions=/valgrind-suppressions.txt"

# If lacking faith in the current suppression list
#VALGRIND=valgrind

# If adding new suppression targets..
VALGRIND="valgrind --suppressions=/valgrind-suppressions.txt --gen-suppressions=all"

PASSWORD="" # no DTLS
#PASSWORD="--password foo" # DTLS

HOSTNAME=`hostname`

HNETD_ARGS="-r /usr/sbin/hnetd-routing -o /usr/share/hnetd/ohp.script -c /usr/share/hnetd/pcp.script -d /etc/init.d/dnsmasq -f /etc/dnsmasq.d/hnet.conf -n $HOSTNAME -p /var/run/hnet_pd --loglevel 7 $PASSWORD"


# Start miniupnpd (only on CPE nodes)
#sh $BUILD/etc/miniupnpd/iptables_init.sh
if [ `echo $HOSTNAME | sed 's/cpe.*$/cpe/'` = "cpe" ]
then
        iptables -t nat -N MINIUPNPD
        iptables -t mangle -N MINIUPNPD
        iptables -t filter -N MINIUPNPD
        ip6tables -t filter -N MINIUPNPD
        miniupnpd -f /etc/miniupnpd.conf
fi

# Start odhcpd
# .. no point really, backend (re)starts it a lot
#sleep 1
#bash -c "`echo $VALGRIND` odhcpd >& $LOGDIR/odhcpd.log >& $LOGDIR/odhcpd.log" &

# Start hnetd
# default dash is braindead, even worse than busybox, on Debian..
bash -c "`echo $VALGRIND` hnetd `echo $HNETD_ARGS` >& $LOGDIR/hnetd.log" &

# And configure it
_withdev eth0 hnet-ifup eth0
_withdev eth1 hnet-ifup eth1
_withdev eth2 hnet-ifup eth2
_withdev eth3 hnet-ifup eth3

# We need mdnsd too
mdnsd

# Mark that the UML VM has finished booting so tests can start
echo done > $LOGDIR/status
